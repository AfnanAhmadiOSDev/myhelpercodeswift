import UIKit

class LoadingIndicatorView: UIView {
    
    var showLikeNative: Bool = false
    
    
    
    //MARK: properties
    let loadingTitleLB: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        
        return label
    }()
    
    let myLoadingIndicator: UIActivityIndicatorView = {
        let indi = UIActivityIndicatorView(style: .large)
        indi.translatesAutoresizingMaskIntoConstraints = false
        indi.color = .black
        return indi
    }()
    
    private var smallBgView: UIView = {
        let vi = UIView()
        vi.translatesAutoresizingMaskIntoConstraints = false
        vi.backgroundColor = .clear
        vi.layer.cornerRadius = 8
        return vi
    }()
    
    
    
    //MARK: setup methods
    init(showLikeNative: Bool) {
        super.init(frame: .zero)
        
        self.showLikeNative = showLikeNative
    }//end method
    
    init() {
        super.init(frame: .zero)
    }//end method
    
    required init?(coder aDecoder: NSCoder) {fatalError("init(coder:) has not been implemented")}
    
    
//    override func setupViews() {
//        super.setupViews()
//    }//end method
    
    
    func setLoadingStyles(bgColor: UIColor, text loadingText: String, textColor loadingTextColor: UIColor, textFontSize: CGFloat, indicatorColor: UIColor) {
        if showLikeNative {
            self.doShowNativeLikeWork(bgColor: bgColor, text: loadingText, textColor: loadingTextColor, textFontSize: textFontSize, indicatorColor: indicatorColor)
            return print("showLikeNative")
        }
        self.backgroundColor = bgColor
        
        loadingTitleLB.text = loadingText
        loadingTitleLB.textColor = loadingTextColor
        loadingTitleLB.font = UIFont.systemFont(ofSize: myHelperMethods.scalableFontSize(baseSize: textFontSize))
        
        myLoadingIndicator.color = indicatorColor
        
        self.addSubview(loadingTitleLB)
        self.addSubview(myLoadingIndicator)
        
        loadingTitleLB.centerXAnchor.constraint(equalTo: self.centerXAnchor, constant: 0).isActive = true
        loadingTitleLB.centerYAnchor.constraint(equalTo: self.centerYAnchor, constant: -15).isActive = true
        
        myLoadingIndicator.centerXAnchor.constraint(equalTo: self.centerXAnchor, constant: 0).isActive = true
        myLoadingIndicator.topAnchor.constraint(equalTo: loadingTitleLB.bottomAnchor, constant: 8).isActive = true
        
        myLoadingIndicator.startAnimating()
    }//end method
    
    func setLoadingStyles(bgColor: UIColor, indicatorColor: UIColor) {
        self.backgroundColor = bgColor
        
        myLoadingIndicator.color = indicatorColor
        
        self.addSubview(myLoadingIndicator)
        
        myLoadingIndicator.mcst_centerOf(parent: self)
        
        myLoadingIndicator.transform = CGAffineTransform(scaleX: 0.75, y: 0.75)
        
        myLoadingIndicator.startAnimating()
    }//end method
    
    
    //MARK: handler methods
    
}//end class




extension LoadingIndicatorView {
    private func doShowNativeLikeWork(bgColor: UIColor, text loadingText: String, textColor loadingTextColor: UIColor, textFontSize: CGFloat, indicatorColor: UIColor) {
        self.backgroundColor = .clear
        
        smallBgView.backgroundColor = bgColor
        
        loadingTitleLB.text = loadingText
        loadingTitleLB.textColor = loadingTextColor
        loadingTitleLB.font = UIFont.systemFont(ofSize: myHelperMethods.scalableFontSize(baseSize: textFontSize))
        
        myLoadingIndicator.color = indicatorColor
        
        self.addSubview(smallBgView)
        self.addSubview(loadingTitleLB)
        self.addSubview(myLoadingIndicator)
        
        loadingTitleLB.centerXAnchor.constraint(equalTo: self.centerXAnchor, constant: 0).isActive = true
        loadingTitleLB.centerYAnchor.constraint(equalTo: self.centerYAnchor, constant: 15).isActive = true
        
        myLoadingIndicator.centerXAnchor.constraint(equalTo: self.centerXAnchor, constant: 0).isActive = true
        myLoadingIndicator.bottomAnchor.constraint(equalTo: loadingTitleLB.topAnchor, constant: -8).isActive = true
        
        myLoadingIndicator.startAnimating()
        
        smallBgView.topAnchor.constraint(equalTo: myLoadingIndicator.topAnchor, constant: -20).isActive = true
        smallBgView.leadingAnchor.constraint(equalTo: loadingTitleLB.leadingAnchor, constant: -20).isActive = true
        smallBgView.trailingAnchor.constraint(equalTo: loadingTitleLB.trailingAnchor, constant: 20).isActive = true
        smallBgView.bottomAnchor.constraint(equalTo: loadingTitleLB.bottomAnchor, constant: 20).isActive = true
    }//end method
    
}//end extension
